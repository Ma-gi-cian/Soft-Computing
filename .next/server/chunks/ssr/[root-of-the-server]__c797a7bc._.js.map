{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/adity/workspace/Projects/ant-spo/app/Implementation.js"],"sourcesContent":["class HybridACOPSO {\r\n    constructor({\r\n      cities,\r\n      n_ants = 10,\r\n      n_particles = 10,\r\n      alpha = 1.0,\r\n      beta = 2.0,\r\n      rho = 0.5,\r\n      w = 0.5,\r\n      c1 = 1.5,\r\n      c2 = 1.5,\r\n      q0 = 0.9,\r\n      max_iterations = 100\r\n    }) {\r\n      /**\r\n       * Initialize the hybrid ACO-PSO algorithm.\r\n       * \r\n       * Parameters:\r\n       * -----------\r\n       * cities : array\r\n       *    Coordinates of cities as [x, y] pairs\r\n       * n_ants : int\r\n       *    Number of ants in the colony\r\n       * n_particles : int\r\n       *    Number of particles in the swarm\r\n       * alpha : float\r\n       *    Importance of pheromone in ACO\r\n       * beta : float\r\n       *    Importance of heuristic information in ACO\r\n       * rho : float\r\n       *    Pheromone evaporation rate\r\n       * w : float\r\n       *    Inertia weight in PSO\r\n       * c1 : float\r\n       *    Cognitive parameter in PSO\r\n       * c2 : float\r\n       *    Social parameter in PSO\r\n       * q0 : float\r\n       *    Exploitation vs exploration balance parameter\r\n       * max_iterations : int\r\n       *    Maximum number of iterations\r\n       */\r\n      this.cities = cities;\r\n      this.n_cities = cities.length;\r\n      this.n_ants = n_ants;\r\n      this.n_particles = n_particles;\r\n      this.alpha = alpha;\r\n      this.beta = beta;\r\n      this.rho = rho;\r\n      this.w = w;\r\n      this.c1 = c1;\r\n      this.c2 = c2;\r\n      this.q0 = q0;\r\n      this.max_iterations = max_iterations;\r\n      \r\n      // Calculate distance matrix\r\n      this.distance_matrix = Array(this.n_cities).fill().map(() => Array(this.n_cities).fill(0));\r\n      for (let i = 0; i < this.n_cities; i++) {\r\n        for (let j = 0; j < this.n_cities; j++) {\r\n          if (i !== j) {\r\n            this.distance_matrix[i][j] = Math.sqrt(\r\n              Math.pow(cities[i][0] - cities[j][0], 2) + \r\n              Math.pow(cities[i][1] - cities[j][1], 2)\r\n            );\r\n          } else {\r\n            this.distance_matrix[i][j] = Infinity;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Initialize pheromone matrix\r\n      this.pheromone = Array(this.n_cities).fill().map(() => Array(this.n_cities).fill(1.0));\r\n      \r\n      // Initialize heuristic information (inverse of distance)\r\n      this.heuristic = Array(this.n_cities).fill().map(() => Array(this.n_cities).fill(0));\r\n      for (let i = 0; i < this.n_cities; i++) {\r\n        for (let j = 0; j < this.n_cities; j++) {\r\n          this.heuristic[i][j] = 1.0 / (this.distance_matrix[i][j] + 1e-10);\r\n        }\r\n      }\r\n      \r\n      // Initialize best solutions\r\n      this.best_route = null;\r\n      this.best_distance = Infinity;\r\n      \r\n      // Particle state\r\n      this.particles = [];\r\n      this.particle_velocities = [];\r\n      this.particle_best_positions = [];\r\n      this.particle_best_distances = Array(n_particles).fill(Infinity);\r\n      this.global_best_position = null;\r\n      this.global_best_distance = Infinity;\r\n      \r\n      // Initialize particles (PSO)\r\n      this.initialize_particles();\r\n    }\r\n    \r\n    initialize_particles() {\r\n      /**Initialize particles with random permutations of cities*/\r\n      for (let i = 0; i < this.n_particles; i++) {\r\n        // Generate a random route\r\n        const route = this.generateRandomPermutation(this.n_cities);\r\n        this.particles.push(route);\r\n        \r\n        // Initialize velocity as an empty list of swaps\r\n        this.particle_velocities.push([]);\r\n        \r\n        // Set personal best to initial position\r\n        this.particle_best_positions.push([...route]);\r\n        \r\n        // Calculate initial distance\r\n        const distance = this.calculate_route_distance(route);\r\n        this.particle_best_distances[i] = distance;\r\n        \r\n        // Update global best if needed\r\n        if (distance < this.global_best_distance) {\r\n          this.global_best_distance = distance;\r\n          this.global_best_position = [...route];\r\n        }\r\n      }\r\n    }\r\n    \r\n    generateRandomPermutation(n) {\r\n      // Create array [0, 1, ..., n-1]\r\n      const array = Array.from({ length: n }, (_, i) => i);\r\n      \r\n      // Fisher-Yates shuffle\r\n      for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n      }\r\n      \r\n      return array;\r\n    }\r\n    \r\n    calculate_route_distance(route) {\r\n      /**Calculate the total distance of a route*/\r\n      let distance = 0;\r\n      for (let i = 0; i < this.n_cities; i++) {\r\n        distance += this.distance_matrix[route[i]][route[(i + 1) % this.n_cities]];\r\n      }\r\n      return distance;\r\n    }\r\n    \r\n    run_aco() {\r\n      /**Run one iteration of the ACO algorithm*/\r\n      const ant_routes = [];\r\n      const ant_distances = [];\r\n      \r\n      // Construct solutions for each ant\r\n      for (let ant = 0; ant < this.n_ants; ant++) {\r\n        const route = Array(this.n_cities).fill(0);\r\n        const visited = Array(this.n_cities).fill(false);\r\n        \r\n        // Start from a random city\r\n        const current_city = Math.floor(Math.random() * this.n_cities);\r\n        route[0] = current_city;\r\n        visited[current_city] = true;\r\n        \r\n        // Construct the tour\r\n        for (let i = 1; i < this.n_cities; i++) {\r\n          let next_city;\r\n          \r\n          if (Math.random() < this.q0) {\r\n            // Exploitation: choose the best next city\r\n            const probabilities = Array(this.n_cities).fill(0);\r\n            for (let j = 0; j < this.n_cities; j++) {\r\n              if (!visited[j]) {\r\n                probabilities[j] = Math.pow(this.pheromone[current_city][j], this.alpha) * \r\n                                Math.pow(this.heuristic[current_city][j], this.beta);\r\n              }\r\n            }\r\n            \r\n            // Find city with max probability\r\n            let max_prob = -1;\r\n            let max_idx = -1;\r\n            for (let j = 0; j < this.n_cities; j++) {\r\n              if (probabilities[j] > max_prob) {\r\n                max_prob = probabilities[j];\r\n                max_idx = j;\r\n              }\r\n            }\r\n            \r\n            if (max_idx !== -1) {\r\n              next_city = max_idx;\r\n            } else {\r\n              // If no valid cities with pheromones, choose randomly from unvisited\r\n              const unvisited = [];\r\n              for (let j = 0; j < this.n_cities; j++) {\r\n                if (!visited[j]) unvisited.push(j);\r\n              }\r\n              next_city = unvisited[Math.floor(Math.random() * unvisited.length)];\r\n            }\r\n          } else {\r\n            // Exploration: choose based on probability\r\n            const probabilities = Array(this.n_cities).fill(0);\r\n            for (let j = 0; j < this.n_cities; j++) {\r\n              if (!visited[j]) {\r\n                probabilities[j] = Math.pow(this.pheromone[current_city][j], this.alpha) *\r\n                               Math.pow(this.heuristic[current_city][j], this.beta);\r\n              }\r\n            }\r\n            \r\n            // Normalize probabilities\r\n            const prob_sum = probabilities.reduce((sum, val) => sum + val, 0);\r\n            if (prob_sum > 0) {\r\n              for (let j = 0; j < this.n_cities; j++) {\r\n                probabilities[j] /= prob_sum;\r\n              }\r\n              \r\n              // Choose next city based on probability (roulette wheel selection)\r\n              const r = Math.random();\r\n              let cum_prob = 0;\r\n              let selected_idx = -1;\r\n              \r\n              for (let j = 0; j < this.n_cities; j++) {\r\n                cum_prob += probabilities[j];\r\n                if (r <= cum_prob) {\r\n                  selected_idx = j;\r\n                  break;\r\n                }\r\n              }\r\n              \r\n              if (selected_idx !== -1) {\r\n                next_city = selected_idx;\r\n              } else {\r\n                // Fallback: choose last city with non-zero probability\r\n                for (let j = this.n_cities - 1; j >= 0; j--) {\r\n                  if (probabilities[j] > 0) {\r\n                    next_city = j;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              // If all probabilities are zero, use uniform distribution over unvisited cities\r\n              const unvisited = [];\r\n              for (let j = 0; j < this.n_cities; j++) {\r\n                if (!visited[j]) unvisited.push(j);\r\n              }\r\n              next_city = unvisited[Math.floor(Math.random() * unvisited.length)];\r\n            }\r\n          }\r\n          \r\n          route[i] = next_city;\r\n          visited[next_city] = true;\r\n        }\r\n        \r\n        // Calculate route distance\r\n        const distance = this.calculate_route_distance(route);\r\n        ant_routes.push(route);\r\n        ant_distances.push(distance);\r\n        \r\n        // Update best solution if needed\r\n        if (distance < this.best_distance) {\r\n          this.best_distance = distance;\r\n          this.best_route = [...route];\r\n        }\r\n      }\r\n      \r\n      // Update pheromones\r\n      // Evaporation\r\n      for (let i = 0; i < this.n_cities; i++) {\r\n        for (let j = 0; j < this.n_cities; j++) {\r\n          this.pheromone[i][j] = (1 - this.rho) * this.pheromone[i][j];\r\n        }\r\n      }\r\n      \r\n      // Deposit new pheromones\r\n      for (let ant = 0; ant < this.n_ants; ant++) {\r\n        const route = ant_routes[ant];\r\n        const distance = ant_distances[ant];\r\n        \r\n        for (let i = 0; i < this.n_cities; i++) {\r\n          const from_city = route[i];\r\n          const to_city = route[(i + 1) % this.n_cities];\r\n          this.pheromone[from_city][to_city] += 1.0 / distance;\r\n          this.pheromone[to_city][from_city] += 1.0 / distance;  // Assuming symmetric TSP\r\n        }\r\n      }\r\n      \r\n      return [this.best_route, this.best_distance];\r\n    }\r\n    \r\n    run_pso() {\r\n      /**Run one iteration of the PSO algorithm*/\r\n      for (let i = 0; i < this.n_particles; i++) {\r\n        // Apply velocity (swap operations)\r\n        const route = [...this.particles[i]];\r\n        \r\n        // Create new velocity with inertia\r\n        const new_velocity = [];\r\n        if (this.particle_velocities[i].length > 0) {\r\n          for (const swap of this.particle_velocities[i]) {\r\n            if (Math.random() < this.w) {\r\n              new_velocity.push(swap);\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Cognitive component (move towards personal best)\r\n        const p_best = this.particle_best_positions[i];\r\n        const cognitive_swaps = this.get_swaps(route, p_best);\r\n        for (const swap of cognitive_swaps) {\r\n          if (Math.random() < this.c1 * Math.random()) {\r\n            new_velocity.push(swap);\r\n          }\r\n        }\r\n        \r\n        // Social component (move towards global best)\r\n        const social_swaps = this.get_swaps(route, this.global_best_position);\r\n        for (const swap of social_swaps) {\r\n          if (Math.random() < this.c2 * Math.random()) {\r\n            new_velocity.push(swap);\r\n          }\r\n        }\r\n        \r\n        // Apply velocity (swaps)\r\n        for (const swap of new_velocity) {\r\n          const [j, k] = swap;\r\n          [route[j], route[k]] = [route[k], route[j]];\r\n        }\r\n        \r\n        // Update velocity\r\n        this.particle_velocities[i] = new_velocity;\r\n        \r\n        // Update position\r\n        this.particles[i] = route;\r\n        \r\n        // Calculate new distance\r\n        const distance = this.calculate_route_distance(route);\r\n        \r\n        // Update personal best\r\n        if (distance < this.particle_best_distances[i]) {\r\n          this.particle_best_distances[i] = distance;\r\n          this.particle_best_positions[i] = [...route];\r\n        }\r\n        \r\n        // Update global best\r\n        if (distance < this.global_best_distance) {\r\n          this.global_best_distance = distance;\r\n          this.global_best_position = [...route];\r\n        }\r\n      }\r\n      \r\n      // Transfer information from PSO to ACO by updating pheromones based on global best\r\n      if (this.global_best_position) {\r\n        // Boost pheromones on global best path\r\n        for (let i = 0; i < this.n_cities; i++) {\r\n          const from_city = this.global_best_position[i];\r\n          const to_city = this.global_best_position[(i + 1) % this.n_cities];\r\n          this.pheromone[from_city][to_city] += 2.0 / this.global_best_distance;\r\n          this.pheromone[to_city][from_city] += 2.0 / this.global_best_distance;\r\n        }\r\n      }\r\n      \r\n      // Update best solution\r\n      if (this.global_best_distance < this.best_distance) {\r\n        this.best_distance = this.global_best_distance;\r\n        this.best_route = [...this.global_best_position];\r\n      }\r\n      \r\n      return [this.global_best_position, this.global_best_distance];\r\n    }\r\n    \r\n    get_swaps(source, target) {\r\n      /**Get a list of swap operations to transform source into target*/\r\n      const swaps = [];\r\n      const source_copy = [...source];\r\n      \r\n      for (let i = 0; i < this.n_cities; i++) {\r\n        if (source_copy[i] !== target[i]) {\r\n          // Find position of target[i] in source\r\n          const j = source_copy.indexOf(target[i]);\r\n          // Swap\r\n          [source_copy[i], source_copy[j]] = [source_copy[j], source_copy[i]];\r\n          swaps.push([i, j]);\r\n        }\r\n      }\r\n      \r\n      return swaps;\r\n    }\r\n    \r\n    optimize(verbose = true) {\r\n      /**Run the hybrid optimization algorithm*/\r\n      const history = [];\r\n      const iterationData = [];\r\n      \r\n      for (let iteration = 0; iteration < this.max_iterations; iteration++) {\r\n        // Run ACO\r\n        const [aco_route, aco_distance] = this.run_aco();\r\n        \r\n        // Run PSO\r\n        const [pso_route, pso_distance] = this.run_pso();\r\n        \r\n        // Record best distance\r\n        history.push(this.best_distance);\r\n        \r\n        // Record detailed iteration data\r\n        iterationData.push({\r\n          iteration: iteration,\r\n          aco_distance: aco_distance,\r\n          pso_distance: pso_distance,\r\n          best_distance: this.best_distance\r\n        });\r\n        \r\n        if (verbose && iteration % 10 === 0) {\r\n          console.log(`Iteration ${iteration}, Best distance: ${this.best_distance.toFixed(2)}`);\r\n        }\r\n      }\r\n      \r\n      // Generate route coordinates for plotting\r\n      const routeCoordinates = this.generateRouteCoordinates(this.best_route);\r\n      \r\n      return {\r\n        // Basic results\r\n        route: this.best_route,\r\n        distance: this.best_distance,\r\n        \r\n        // Data for plotting\r\n        history: history,\r\n        iterationData: iterationData,\r\n        \r\n        // City data\r\n        cities: this.cities,\r\n        cityLabels: Array.from({ length: this.n_cities }, (_, i) => i.toString()),\r\n        \r\n        // Route visualization data\r\n        routeCoordinates: routeCoordinates,\r\n        \r\n        // Convergence plot data\r\n        convergenceData: {\r\n          xValues: Array.from({ length: this.max_iterations }, (_, i) => i),\r\n          yValues: history,\r\n          title: 'Convergence of Hybrid ACO-PSO Algorithm',\r\n          xLabel: 'Iteration',\r\n          yLabel: 'Best Distance'\r\n        },\r\n        \r\n        // Route plot data\r\n        routePlotData: {\r\n          cityCoordinates: this.cities,\r\n          routePath: routeCoordinates,\r\n          title: `Best Route - Distance: ${this.best_distance.toFixed(2)}`,\r\n        }\r\n      };\r\n    }\r\n    \r\n    generateRouteCoordinates(route) {\r\n      // Generate coordinates for the route path\r\n      const coordinates = [];\r\n      for (let i = 0; i < route.length; i++) {\r\n        coordinates.push(this.cities[route[i]]);\r\n      }\r\n      // Add the first city again to close the loop\r\n      coordinates.push(this.cities[route[0]]);\r\n      \r\n      return coordinates;\r\n    }\r\n  }\r\n  \r\n  // Example usage\r\n  function runExample() {\r\n    // Generate random cities\r\n    const seedRandom = (seed) => {\r\n      return () => {\r\n        seed = (seed * 9301 + 49297) % 233280;\r\n        return seed / 233280;\r\n      };\r\n    };\r\n    \r\n    const random = seedRandom(42);\r\n    \r\n    const n_cities = 20;\r\n    const cities = Array(n_cities).fill().map(() => [\r\n      random() * 100,\r\n      random() * 100\r\n    ]);\r\n    \r\n    // Create and run the hybrid algorithm\r\n    const hybrid = new HybridACOPSO({\r\n      cities: cities,\r\n      n_ants: 20,\r\n      n_particles: 20,\r\n      alpha: 1.0,\r\n      beta: 5.0,\r\n      rho: 0.5,\r\n      w: 0.5,\r\n      c1: 1.5,\r\n      c2: 1.5,\r\n      q0: 0.9,\r\n      max_iterations: 100\r\n    });\r\n    \r\n    const result = hybrid.optimize();\r\n    \r\n    console.log(`Best distance found: ${result.distance.toFixed(2)}`);\r\n    console.log(`Best route: ${result.route}`);\r\n    \r\n    return result;\r\n  }\r\n  \r\n  // Export the class and example function\r\n  module.exports = { HybridACOPSO, runExample };"],"names":[],"mappings":"AAAA,MAAM;IACF,YAAY,EACV,MAAM,EACN,SAAS,EAAE,EACX,cAAc,EAAE,EAChB,QAAQ,GAAG,EACX,OAAO,GAAG,EACV,MAAM,GAAG,EACT,IAAI,GAAG,EACP,KAAK,GAAG,EACR,KAAK,GAAG,EACR,KAAK,GAAG,EACR,iBAAiB,GAAG,EACrB,CAAE;QACD;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BC,GACD,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,QAAQ,GAAG,OAAO,MAAM;QAC7B,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,CAAC,GAAG;QACT,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,cAAc,GAAG;QAEtB,4BAA4B;QAC5B,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,CAAC,IAAM,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;QACvF,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,IAAI,MAAM,GAAG;oBACX,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,IAAI,CACpC,KAAK,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE,KACtC,KAAK,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,EAAE,EAAE;gBAE1C,OAAO;oBACL,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG;gBAC/B;YACF;QACF;QAEA,8BAA8B;QAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,CAAC,IAAM,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;QAEjF,yDAAyD;QACzD,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,GAAG,GAAG,CAAC,IAAM,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;QACjF,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK;YAClE;QACF;QAEA,4BAA4B;QAC5B,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,aAAa,GAAG;QAErB,iBAAiB;QACjB,IAAI,CAAC,SAAS,GAAG,EAAE;QACnB,IAAI,CAAC,mBAAmB,GAAG,EAAE;QAC7B,IAAI,CAAC,uBAAuB,GAAG,EAAE;QACjC,IAAI,CAAC,uBAAuB,GAAG,MAAM,aAAa,IAAI,CAAC;QACvD,IAAI,CAAC,oBAAoB,GAAG;QAC5B,IAAI,CAAC,oBAAoB,GAAG;QAE5B,6BAA6B;QAC7B,IAAI,CAAC,oBAAoB;IAC3B;IAEA,uBAAuB;QACrB,0DAA0D,GAC1D,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,IAAK;YACzC,0BAA0B;YAC1B,MAAM,QAAQ,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,QAAQ;YAC1D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAEpB,gDAAgD;YAChD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;YAEhC,wCAAwC;YACxC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC;mBAAI;aAAM;YAE5C,6BAA6B;YAC7B,MAAM,WAAW,IAAI,CAAC,wBAAwB,CAAC;YAC/C,IAAI,CAAC,uBAAuB,CAAC,EAAE,GAAG;YAElC,+BAA+B;YAC/B,IAAI,WAAW,IAAI,CAAC,oBAAoB,EAAE;gBACxC,IAAI,CAAC,oBAAoB,GAAG;gBAC5B,IAAI,CAAC,oBAAoB,GAAG;uBAAI;iBAAM;YACxC;QACF;IACF;IAEA,0BAA0B,CAAC,EAAE;QAC3B,gCAAgC;QAChC,MAAM,QAAQ,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAE,GAAG,CAAC,GAAG,IAAM;QAElD,uBAAuB;QACvB,IAAK,IAAI,IAAI,MAAM,MAAM,GAAG,GAAG,IAAI,GAAG,IAAK;YACzC,MAAM,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,CAAC,IAAI,CAAC;YAC3C,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG;gBAAC,KAAK,CAAC,EAAE;gBAAE,KAAK,CAAC,EAAE;aAAC;QAC7C;QAEA,OAAO;IACT;IAEA,yBAAyB,KAAK,EAAE;QAC9B,0CAA0C,GAC1C,IAAI,WAAW;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,YAAY,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5E;QACA,OAAO;IACT;IAEA,UAAU;QACR,yCAAyC,GACzC,MAAM,aAAa,EAAE;QACrB,MAAM,gBAAgB,EAAE;QAExB,mCAAmC;QACnC,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,MAAO;YAC1C,MAAM,QAAQ,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;YACxC,MAAM,UAAU,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;YAE1C,2BAA2B;YAC3B,MAAM,eAAe,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,CAAC,QAAQ;YAC7D,KAAK,CAAC,EAAE,GAAG;YACX,OAAO,CAAC,aAAa,GAAG;YAExB,qBAAqB;YACrB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,IAAI;gBAEJ,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC,EAAE,EAAE;oBAC3B,0CAA0C;oBAC1C,MAAM,gBAAgB,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;oBAChD,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;wBACtC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;4BACf,aAAa,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,IACvD,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI;wBACrE;oBACF;oBAEA,iCAAiC;oBACjC,IAAI,WAAW,CAAC;oBAChB,IAAI,UAAU,CAAC;oBACf,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;wBACtC,IAAI,aAAa,CAAC,EAAE,GAAG,UAAU;4BAC/B,WAAW,aAAa,CAAC,EAAE;4BAC3B,UAAU;wBACZ;oBACF;oBAEA,IAAI,YAAY,CAAC,GAAG;wBAClB,YAAY;oBACd,OAAO;wBACL,qEAAqE;wBACrE,MAAM,YAAY,EAAE;wBACpB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;4BACtC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,IAAI,CAAC;wBAClC;wBACA,YAAY,SAAS,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,UAAU,MAAM,EAAE;oBACrE;gBACF,OAAO;oBACL,2CAA2C;oBAC3C,MAAM,gBAAgB,MAAM,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;oBAChD,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;wBACtC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;4BACf,aAAa,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,IACxD,KAAK,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI;wBACpE;oBACF;oBAEA,0BAA0B;oBAC1B,MAAM,WAAW,cAAc,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,KAAK;oBAC/D,IAAI,WAAW,GAAG;wBAChB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;4BACtC,aAAa,CAAC,EAAE,IAAI;wBACtB;wBAEA,mEAAmE;wBACnE,MAAM,IAAI,KAAK,MAAM;wBACrB,IAAI,WAAW;wBACf,IAAI,eAAe,CAAC;wBAEpB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;4BACtC,YAAY,aAAa,CAAC,EAAE;4BAC5B,IAAI,KAAK,UAAU;gCACjB,eAAe;gCACf;4BACF;wBACF;wBAEA,IAAI,iBAAiB,CAAC,GAAG;4BACvB,YAAY;wBACd,OAAO;4BACL,uDAAuD;4BACvD,IAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,GAAG,GAAG,KAAK,GAAG,IAAK;gCAC3C,IAAI,aAAa,CAAC,EAAE,GAAG,GAAG;oCACxB,YAAY;oCACZ;gCACF;4BACF;wBACF;oBACF,OAAO;wBACL,gFAAgF;wBAChF,MAAM,YAAY,EAAE;wBACpB,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;4BACtC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,UAAU,IAAI,CAAC;wBAClC;wBACA,YAAY,SAAS,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,UAAU,MAAM,EAAE;oBACrE;gBACF;gBAEA,KAAK,CAAC,EAAE,GAAG;gBACX,OAAO,CAAC,UAAU,GAAG;YACvB;YAEA,2BAA2B;YAC3B,MAAM,WAAW,IAAI,CAAC,wBAAwB,CAAC;YAC/C,WAAW,IAAI,CAAC;YAChB,cAAc,IAAI,CAAC;YAEnB,iCAAiC;YACjC,IAAI,WAAW,IAAI,CAAC,aAAa,EAAE;gBACjC,IAAI,CAAC,aAAa,GAAG;gBACrB,IAAI,CAAC,UAAU,GAAG;uBAAI;iBAAM;YAC9B;QACF;QAEA,oBAAoB;QACpB,cAAc;QACd,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE;YAC9D;QACF;QAEA,yBAAyB;QACzB,IAAK,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,MAAO;YAC1C,MAAM,QAAQ,UAAU,CAAC,IAAI;YAC7B,MAAM,WAAW,aAAa,CAAC,IAAI;YAEnC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,MAAM,YAAY,KAAK,CAAC,EAAE;gBAC1B,MAAM,UAAU,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,IAAI,MAAM;gBAC5C,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,IAAI,MAAM,UAAW,yBAAyB;YAClF;QACF;QAEA,OAAO;YAAC,IAAI,CAAC,UAAU;YAAE,IAAI,CAAC,aAAa;SAAC;IAC9C;IAEA,UAAU;QACR,yCAAyC,GACzC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,WAAW,EAAE,IAAK;YACzC,mCAAmC;YACnC,MAAM,QAAQ;mBAAI,IAAI,CAAC,SAAS,CAAC,EAAE;aAAC;YAEpC,mCAAmC;YACnC,MAAM,eAAe,EAAE;YACvB,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,MAAM,GAAG,GAAG;gBAC1C,KAAK,MAAM,QAAQ,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAE;oBAC9C,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC,EAAE;wBAC1B,aAAa,IAAI,CAAC;oBACpB;gBACF;YACF;YAEA,mDAAmD;YACnD,MAAM,SAAS,IAAI,CAAC,uBAAuB,CAAC,EAAE;YAC9C,MAAM,kBAAkB,IAAI,CAAC,SAAS,CAAC,OAAO;YAC9C,KAAK,MAAM,QAAQ,gBAAiB;gBAClC,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC,EAAE,GAAG,KAAK,MAAM,IAAI;oBAC3C,aAAa,IAAI,CAAC;gBACpB;YACF;YAEA,8CAA8C;YAC9C,MAAM,eAAe,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,oBAAoB;YACpE,KAAK,MAAM,QAAQ,aAAc;gBAC/B,IAAI,KAAK,MAAM,KAAK,IAAI,CAAC,EAAE,GAAG,KAAK,MAAM,IAAI;oBAC3C,aAAa,IAAI,CAAC;gBACpB;YACF;YAEA,yBAAyB;YACzB,KAAK,MAAM,QAAQ,aAAc;gBAC/B,MAAM,CAAC,GAAG,EAAE,GAAG;gBACf,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG;oBAAC,KAAK,CAAC,EAAE;oBAAE,KAAK,CAAC,EAAE;iBAAC;YAC7C;YAEA,kBAAkB;YAClB,IAAI,CAAC,mBAAmB,CAAC,EAAE,GAAG;YAE9B,kBAAkB;YAClB,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG;YAEpB,yBAAyB;YACzB,MAAM,WAAW,IAAI,CAAC,wBAAwB,CAAC;YAE/C,uBAAuB;YACvB,IAAI,WAAW,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE;gBAC9C,IAAI,CAAC,uBAAuB,CAAC,EAAE,GAAG;gBAClC,IAAI,CAAC,uBAAuB,CAAC,EAAE,GAAG;uBAAI;iBAAM;YAC9C;YAEA,qBAAqB;YACrB,IAAI,WAAW,IAAI,CAAC,oBAAoB,EAAE;gBACxC,IAAI,CAAC,oBAAoB,GAAG;gBAC5B,IAAI,CAAC,oBAAoB,GAAG;uBAAI;iBAAM;YACxC;QACF;QAEA,mFAAmF;QACnF,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,uCAAuC;YACvC,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;gBACtC,MAAM,YAAY,IAAI,CAAC,oBAAoB,CAAC,EAAE;gBAC9C,MAAM,UAAU,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;gBAClE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,IAAI,MAAM,IAAI,CAAC,oBAAoB;gBACrE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,IAAI,MAAM,IAAI,CAAC,oBAAoB;YACvE;QACF;QAEA,uBAAuB;QACvB,IAAI,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,aAAa,EAAE;YAClD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,oBAAoB;YAC9C,IAAI,CAAC,UAAU,GAAG;mBAAI,IAAI,CAAC,oBAAoB;aAAC;QAClD;QAEA,OAAO;YAAC,IAAI,CAAC,oBAAoB;YAAE,IAAI,CAAC,oBAAoB;SAAC;IAC/D;IAEA,UAAU,MAAM,EAAE,MAAM,EAAE;QACxB,gEAAgE,GAChE,MAAM,QAAQ,EAAE;QAChB,MAAM,cAAc;eAAI;SAAO;QAE/B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAK;YACtC,IAAI,WAAW,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,EAAE;gBAChC,uCAAuC;gBACvC,MAAM,IAAI,YAAY,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvC,OAAO;gBACP,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE,CAAC,GAAG;oBAAC,WAAW,CAAC,EAAE;oBAAE,WAAW,CAAC,EAAE;iBAAC;gBACnE,MAAM,IAAI,CAAC;oBAAC;oBAAG;iBAAE;YACnB;QACF;QAEA,OAAO;IACT;IAEA,SAAS,UAAU,IAAI,EAAE;QACvB,wCAAwC,GACxC,MAAM,UAAU,EAAE;QAClB,MAAM,gBAAgB,EAAE;QAExB,IAAK,IAAI,YAAY,GAAG,YAAY,IAAI,CAAC,cAAc,EAAE,YAAa;YACpE,UAAU;YACV,MAAM,CAAC,WAAW,aAAa,GAAG,IAAI,CAAC,OAAO;YAE9C,UAAU;YACV,MAAM,CAAC,WAAW,aAAa,GAAG,IAAI,CAAC,OAAO;YAE9C,uBAAuB;YACvB,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa;YAE/B,iCAAiC;YACjC,cAAc,IAAI,CAAC;gBACjB,WAAW;gBACX,cAAc;gBACd,cAAc;gBACd,eAAe,IAAI,CAAC,aAAa;YACnC;YAEA,IAAI,WAAW,YAAY,OAAO,GAAG;gBACnC,QAAQ,GAAG,CAAC,CAAC,UAAU,EAAE,UAAU,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI;YACvF;QACF;QAEA,0CAA0C;QAC1C,MAAM,mBAAmB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAU;QAEtE,OAAO;YACL,gBAAgB;YAChB,OAAO,IAAI,CAAC,UAAU;YACtB,UAAU,IAAI,CAAC,aAAa;YAE5B,oBAAoB;YACpB,SAAS;YACT,eAAe;YAEf,YAAY;YACZ,QAAQ,IAAI,CAAC,MAAM;YACnB,YAAY,MAAM,IAAI,CAAC;gBAAE,QAAQ,IAAI,CAAC,QAAQ;YAAC,GAAG,CAAC,GAAG,IAAM,EAAE,QAAQ;YAEtE,2BAA2B;YAC3B,kBAAkB;YAElB,wBAAwB;YACxB,iBAAiB;gBACf,SAAS,MAAM,IAAI,CAAC;oBAAE,QAAQ,IAAI,CAAC,cAAc;gBAAC,GAAG,CAAC,GAAG,IAAM;gBAC/D,SAAS;gBACT,OAAO;gBACP,QAAQ;gBACR,QAAQ;YACV;YAEA,kBAAkB;YAClB,eAAe;gBACb,iBAAiB,IAAI,CAAC,MAAM;gBAC5B,WAAW;gBACX,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI;YAClE;QACF;IACF;IAEA,yBAAyB,KAAK,EAAE;QAC9B,0CAA0C;QAC1C,MAAM,cAAc,EAAE;QACtB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YACrC,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QACxC;QACA,6CAA6C;QAC7C,YAAY,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;QAEtC,OAAO;IACT;AACF;AAEA,gBAAgB;AAChB,SAAS;IACP,yBAAyB;IACzB,MAAM,aAAa,CAAC;QAClB,OAAO;YACL,OAAO,CAAC,OAAO,OAAO,KAAK,IAAI;YAC/B,OAAO,OAAO;QAChB;IACF;IAEA,MAAM,SAAS,WAAW;IAE1B,MAAM,WAAW;IACjB,MAAM,SAAS,MAAM,UAAU,IAAI,GAAG,GAAG,CAAC,IAAM;YAC9C,WAAW;YACX,WAAW;SACZ;IAED,sCAAsC;IACtC,MAAM,SAAS,IAAI,aAAa;QAC9B,QAAQ;QACR,QAAQ;QACR,aAAa;QACb,OAAO;QACP,MAAM;QACN,KAAK;QACL,GAAG;QACH,IAAI;QACJ,IAAI;QACJ,IAAI;QACJ,gBAAgB;IAClB;IAEA,MAAM,SAAS,OAAO,QAAQ;IAE9B,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,OAAO,QAAQ,CAAC,OAAO,CAAC,IAAI;IAChE,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,OAAO,KAAK,EAAE;IAEzC,OAAO;AACT;AAEA,wCAAwC;AACxC,OAAO,OAAO,GAAG;IAAE;IAAc;AAAW","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/adity/workspace/Projects/ant-spo/app/page.tsx"],"sourcesContent":["'use client'\nimport Image from \"next/image\";\nimport { HybridACOPSO } from \"./Implementation\";\nimport { useState, useRef, useEffect } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ScatterController\n} from 'chart.js';\nimport { Line, Scatter } from 'react-chartjs-2';\n\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ScatterController\n);\n\nexport default function Home() {\n  interface City {\n    x: number;\n    y: number;\n  }\n\n  interface OptimizationResult {\n    route: number[] | null; // Updated to allow null\n    distance: number;\n    history: number[];\n    iterationData: { // Added this field from the actual result object\n      iteration: number;\n      aco_distance: number | any[] | null;\n      pso_distance: number | any[] | null;\n      best_distance: number;\n    }[];\n    cities: number[][];\n    routeCoordinates: number[][];\n    convergenceData: {\n      xValues: number[];\n      yValues: number[];\n      title: string;\n      xLabel: string;\n      yLabel: string;\n    };\n    routePlotData: {\n      cityCoordinates: number[][];\n      routePath: number[][];\n      title: string;\n    };\n  }\n\n  const [cities, setCities] = useState<City[]>([]);\n  const [newCityX, setNewCityX] = useState<string>('');\n  const [newCityY, setNewCityY] = useState<string>('');\n  const [result, setResult] = useState<OptimizationResult | null>(null);\n  const [isOptimizing, setIsOptimizing] = useState<boolean>(false);\n  const [parameters, setParameters] = useState({\n    n_ants: 20,\n    n_particles: 20,\n    alpha: 1.0,\n    beta: 5.0,\n    rho: 0.5,\n    max_iterations: 100\n  });\n  \n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const inputCity = () => {\n    const x = parseFloat(newCityX);\n    const y = parseFloat(newCityY);\n    \n    if (!isNaN(x) && !isNaN(y)) {\n      setCities([...cities, { x, y }]);\n      setNewCityX('');\n      setNewCityY('');\n    }\n  };\n\n  const removeCity = (index: number) => {\n    setCities(cities.filter((_, i) => i !== index));\n  };\n\n  const generateRandomCities = (count: number) => {\n    const newCities = Array(count).fill(0).map(() => ({\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    }));\n    setCities(newCities);\n  };\n\n  const clearCities = () => {\n    setCities([]);\n    setResult(null);\n  };\n\n  const runOptimization = () => {\n    if (cities.length < 4) {\n      alert(\"Please add at least 4 cities to run the optimization\");\n      return;\n    }\n\n    setIsOptimizing(true);\n\n    // Convert cities to the format expected by HybridACOPSO\n    const cityCoordinates = cities.map(city => [city.x, city.y]);\n\n    // Run optimization in the next tick to allow UI update\n    setTimeout(() => {\n      try {\n        const hybrid = new HybridACOPSO({\n          cities: cityCoordinates,\n          n_ants: parameters.n_ants,\n          n_particles: parameters.n_particles,\n          alpha: parameters.alpha,\n          beta: parameters.beta,\n          rho: parameters.rho,\n          max_iterations: parameters.max_iterations\n        });\n\n        \n        const optimizationResult = hybrid.optimize() as OptimizationResult;\n        setResult(optimizationResult);\n      } catch (error) {\n        console.error(\"Optimization error:\", error);\n        alert(\"An error occurred during optimization\");\n      } finally {\n        setIsOptimizing(false);\n      }\n    }, 100);\n  };\n\n  // Draw cities and route on canvas\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Scale factors to fit within canvas\n    const padding = 20;\n    const maxX = Math.max(...cities.map(city => city.x), 100);\n    const maxY = Math.max(...cities.map(city => city.y), 100);\n    const scaleX = (canvas.width - 2 * padding) / maxX;\n    const scaleY = (canvas.height - 2 * padding) / maxY;\n\n    // Draw cities\n    cities.forEach((city, index) => {\n      ctx.beginPath();\n      ctx.arc(\n        padding + city.x * scaleX, \n        padding + city.y * scaleY, \n        5, 0, 2 * Math.PI\n      );\n      ctx.fillStyle = 'blue';\n      ctx.fill();\n      ctx.closePath();\n      \n      // Add city index label\n      ctx.fillStyle = 'black';\n      ctx.font = '12px Arial';\n      ctx.fillText(\n        `${index}`, \n        padding + city.x * scaleX + 8, \n        padding + city.y * scaleY + 4\n      );\n    });\n\n    // Draw route if result exists and route is not null\n    if (result && result.route) {\n      ctx.beginPath();\n      const firstCity = cities[result.route[0]];\n      ctx.moveTo(\n        padding + firstCity.x * scaleX,\n        padding + firstCity.y * scaleY\n      );\n      \n      // Draw route lines\n      for (let i = 1; i < result.route.length; i++) {\n        const city = cities[result.route[i]];\n        ctx.lineTo(\n          padding + city.x * scaleX,\n          padding + city.y * scaleY\n        );\n      }\n      \n      // Close the loop\n      ctx.lineTo(\n        padding + firstCity.x * scaleX,\n        padding + firstCity.y * scaleY\n      );\n      \n      ctx.strokeStyle = 'red';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n    }\n  }, [cities, result]);\n\n  // Prepare convergence chart data\n  const convergenceChartData = {\n    labels: result?.convergenceData?.xValues || [],\n    datasets: [\n      {\n        label: 'Best Distance',\n        data: result?.convergenceData?.yValues || [],\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.5)',\n      }\n    ]\n  };\n\n  const convergenceChartOptions = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: result?.convergenceData?.title || 'Convergence Chart',\n      },\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: result?.convergenceData?.xLabel || 'Iteration'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: result?.convergenceData?.yLabel || 'Best Distance'\n        }\n      }\n    }\n  };\n\n  return (\n    <main className=\"w-full text-black min-h-screen bg-blue-100 p-8\">\n      <h1 className=\"text-3xl font-serif mb-6 text-center\">\n        Travelling Sales Man Problem using - Hybrid Ant Colony Optimization and Particle Swarm Optimization (HybridACOPSO)\n      </h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <div className=\"bg-gray-50 p-6 rounded-lg shadow\">\n          <h2 className=\"text-xl font-bold mb-4\">Configuration</h2>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"font-bold mb-2\">Add Cities</h3>\n            <div className=\"flex gap-2 mb-2\">\n              <input\n                type=\"number\"\n                value={newCityX}\n                onChange={(e) => setNewCityX(e.target.value)}\n                placeholder=\"X coordinate\"\n                className=\"border p-2 w-32\"\n              />\n              <input\n                type=\"number\"\n                value={newCityY}\n                onChange={(e) => setNewCityY(e.target.value)}\n                placeholder=\"Y coordinate\"\n                className=\"border p-2 w-32\"\n              />\n              <button\n                onClick={inputCity}\n                className=\"bg-blue-500 text-white p-2 rounded\"\n              >\n                Add City\n              </button>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => generateRandomCities(20)}\n                className=\"bg-green-500 text-white p-2 rounded\"\n              >\n                Generate 20 Random Cities\n              </button>\n              <button\n                onClick={clearCities}\n                className=\"bg-red-500 text-white p-2 rounded\"\n              >\n                Clear All\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"font-bold mb-2\">Algorithm Parameters</h3>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <div>\n                <label className=\"block text-sm\">Number of Ants</label>\n                <input\n                  type=\"number\"\n                  value={parameters.n_ants}\n                  onChange={(e) => setParameters({...parameters, n_ants: parseInt(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm\">Number of Particles</label>\n                <input\n                  type=\"number\"\n                  value={parameters.n_particles}\n                  onChange={(e) => setParameters({...parameters, n_particles: parseInt(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm\">Alpha (ACO)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={parameters.alpha}\n                  onChange={(e) => setParameters({...parameters, alpha: parseFloat(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm\">Beta (ACO)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={parameters.beta}\n                  onChange={(e) => setParameters({...parameters, beta: parseFloat(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm\">Rho (Evaporation)</label>\n                <input\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={parameters.rho}\n                  onChange={(e) => setParameters({...parameters, rho: parseFloat(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm\">Max Iterations</label>\n                <input\n                  type=\"number\"\n                  value={parameters.max_iterations}\n                  onChange={(e) => setParameters({...parameters, max_iterations: parseInt(e.target.value)})}\n                  className=\"border p-2 w-full\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mb-4\">\n            <button\n              onClick={runOptimization}\n              disabled={isOptimizing || cities.length < 4}\n              className={`w-full p-3 rounded font-bold ${\n                isOptimizing || cities.length < 4\n                  ? 'bg-gray-300 cursor-not-allowed'\n                  : 'bg-blue-600 text-white hover:bg-blue-700'\n              }`}\n            >\n              {isOptimizing ? 'Optimizing...' : 'Run Optimization'}\n            </button>\n          </div>\n          \n          <div>\n            <h3 className=\"font-bold mb-2\">City List ({cities.length})</h3>\n            <div className=\"max-h-60 overflow-y-auto border rounded\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-100\">\n                  <tr>\n                    <th className=\"p-2 text-left\">Index</th>\n                    <th className=\"p-2 text-left\">X</th>\n                    <th className=\"p-2 text-left\">Y</th>\n                    <th className=\"p-2 text-left\">Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {cities.map((city, index) => (\n                    <tr key={index} className=\"border-t\">\n                      <td className=\"p-2\">{index}</td>\n                      <td className=\"p-2\">{city.x.toFixed(2)}</td>\n                      <td className=\"p-2\">{city.y.toFixed(2)}</td>\n                      <td className=\"p-2\">\n                        <button\n                          onClick={() => removeCity(index)}\n                          className=\"text-red-500 hover:text-red-700\"\n                        >\n                          Remove\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                  {cities.length === 0 && (\n                    <tr>\n                      <td colSpan={4} className=\"p-2 text-center text-gray-500\">\n                        No cities added yet\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n        \n        <div>\n          <div className=\"bg-gray-50 p-6 rounded-lg shadow mb-8\">\n            <h2 className=\"text-xl font-bold mb-4\">City Map & Optimal Route</h2>\n            <canvas \n              ref={canvasRef} \n              width={500} \n              height={400} \n              className=\"w-full border rounded bg-white\"\n            />\n            {result && (\n              <div className=\"mt-2 text-center font-bold text-green-600\">\n                Best Route Distance: {result.distance.toFixed(2)}\n              </div>\n            )}\n          </div>\n          \n          {result && (\n            <div className=\"bg-gray-50 p-6 rounded-lg shadow\">\n              <h2 className=\"text-xl font-bold mb-4\">Convergence Graph</h2>\n              <Line \n                data={convergenceChartData} \n                options={convergenceChartOptions}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {result && (\n        <div className=\"mt-8 bg-gray-50 p-6 rounded-lg shadow\">\n          <h2 className=\"text-xl font-bold mb-4\">Optimization Results</h2>\n          <div className=\"mb-4\">\n            <h3 className=\"font-bold\">Best Route:</h3>\n            <div className=\"p-2 bg-white border rounded overflow-x-auto\">\n              <code>\n                {result.route ? `${result.route.join(' → ')} → ${result.route[0]}` : 'No route found'}\n              </code>\n            </div>\n          </div>\n          <div>\n            <h3 className=\"font-bold\">Final Distance: {result.distance.toFixed(2)}</h3>\n          </div>\n        </div>\n      )}\n    </main>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}